format_version: 3
pipelines:
{{- range $pipeline := .Pipelines }}
  {{$pipeline.Name}}-build:
{{- if eq $pipeline.Type "maven" }}
    # MAVEN-DOCKER
    {{ if $pipeline.Group }}group: {{$pipeline.Group}}{{end}}
    label_template: ${COUNT}-${git[:7]}
    lock_behavior: unlockWhenFinished
    display_order: -1
    materials:
      git:
        git: {{$pipeline.Git.URL}}
        shallow_clone: false
        auto_update: true
        branch: {{$pipeline.Git.Branch}}
        destination: build
      maven:
        ignore_for_scheduling: false
        pipeline: "Maven"
        stage: maven-test
    stages:
    - docker:
        fetch_materials: true
        keep_artifacts: false
        clean_workspace: false
        approval:
          type: success
          allow_only_on_success: false
        jobs:
          docker-build:
            timeout: 0
            tasks:
            - exec:
                command: /bin/bash
                arguments:
                - -c 
                - 'mkdir -p maven-repo &&
                  docker run --user `id -u`:`id -g` --group-add 999 --rm -v /home/go/.m2:/build/.m2 -v $PWD/maven-repo:/maven-repo -v $PWD:/build -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/.docker:/.docker --entrypoint /bin/bash ubirch/maven-build:vOpenJDK_${GO_DEPENDENCY_LABEL_MAVEN} -c "mvn deploy -B -DskipTests=true -Ddockerfile.dockerConfigFile=/.docker/config.json -Duser.home=/build -Ddockerfile.tag=#{DOCKER_IMAGE}:${GO_PIPELINE_LABEL} -Ddockerfile.push.skip=true -Dbuild.number=${GO_PIPELINE_LABEL}" &&
                  docker push "#{DOCKER_IMAGE}:${GO_PIPELINE_LABEL}" &&
                  docker tag "#{DOCKER_IMAGE}:${GO_PIPELINE_LABEL}" "#{DOCKER_IMAGE}:latest" &&
                  docker push "#{DOCKER_IMAGE}:latest"'
                working_directory: build
                run_if: passed
    parameters:
      DOCKER_IMAGE: {{$pipeline.DockerImage}}
{{- else if eq $pipeline.Type "dockerfile" }}
    # DOCKERFILE
    {{ if $pipeline.Group }}group: {{$pipeline.Group}}{{end}}
    label_template: ${COUNT}-${git[:7]}
    lock_behavior: unlockWhenFinished
    display_order: -1
    materials:
      git:
        git: {{$pipeline.Git.URL}}
        shallow_clone: false
        auto_update: true
        branch: {{$pipeline.Git.Branch}}
        destination: build
    stages:
    - docker:
        fetch_materials: true
        keep_artifacts: false
        clean_workspace: false
        approval:
          type: success
          allow_only_on_success: false
        jobs:
          docker-build:
            timeout: 0
            tasks:
            - exec:
                command: bash
                arguments:
                - -c
                - 'docker build -t #{DOCKER_IMAGE}:$GO_PIPELINE_LABEL . &&
                  docker tag #{DOCKER_IMAGE}:$GO_PIPELINE_LABEL #{DOCKER_IMAGE}:latest &&
                  docker push #{DOCKER_IMAGE}:$GO_PIPELINE_LABEL &&
                  docker push #{DOCKER_IMAGE}:latest'
                working_directory: build
                run_if: passed
    parameters:
      DOCKER_IMAGE: {{$pipeline.DockerImage}}
{{ else }}
    # Unknown pipeline type '{{ $pipeline.Type }}'
{{ end }}
  {{$pipeline.Name}}-deploy-dev:
    group: wip-paul
    label_template: ${service}
    lock_behavior: none
    display_order: -1
    materials:
      service:
        ignore_for_scheduling: false
        pipeline: "{{$pipeline.Name}}-build"
        stage: docker
      git:
        git: {{$pipeline.HelmGit.URL}}
        shallow_clone: false
        auto_update: true
        branch: {{$pipeline.HelmGit.Branch}}
        destination: build
    stages:
    - deploy:
        fetch_materials: true
        keep_artifacts: false
        clean_workspace: false
        approval:
          type: success
          allow_only_on_success: false
        jobs:
          helm:
            timeout: 0
            tasks:
            - exec:
                command: /bin/bash
                arguments:
                - -c
                - 'docker run --rm -v $PWD:/build -v /home/go/#{K8S_CFG}:/opt/kubeconfig -e KUBECONFIG="/opt/kubeconfig" --entrypoint /bin/bash dtzar/helm-kubectl:2.14.3 -c "helm upgrade --install --atomic --wait --timeout=120 --namespace=#{NAMESPACE} --values /build/#{CHARTPATH}values.#{ENVIRONMENT}.yaml --set=image.tag=${GO_PIPELINE_LABEL} #{SERVICE_NAME} /build/#{CHARTPATH}"'
                working_directory: build
                run_if: passed
    - bump:
        fetch_materials: true
        keep_artifacts: false
        clean_workspace: false
        approval:
          type: success
          allow_only_on_success: false
        jobs:
          helm:
            timeout: 0
            tasks:
            - exec:
                command: /bin/bash
                arguments:
                - -c
                - 'docker pull #{DOCKER_IMAGE}:${GO_PIPELINE_LABEL} &&
                  docker tag #{DOCKER_IMAGE}:${GO_PIPELINE_LABEL} #{DOCKER_IMAGE}:latest &&
                  docker push #{DOCKER_IMAGE}:latest'
                working_directory: build
                run_if: passed
    - promote:
        fetch_materials: true
        keep_artifacts: false
        clean_workspace: false
        approval:
          type: manual
          allow_only_on_success: true
        jobs:
          helm:
            timeout: 0
            tasks:
            - exec:
                command: /bin/sh
                arguments:
                - -c
                - echo 'manually promoted on $(date)'
                working_directory: build
                run_if: passed
    parameters:
      ENVIRONMENT: {{"dev"}}
      NAMESPACE: {{$pipeline.NamespacePrefix}}-{{"dev"}}
      CHARTPATH: {{$pipeline.HelmChartPath}}
      K8S_CFG: ubirch{{"dev" | Title}}config.conf
      SERVICE_NAME: {{$pipeline.Name}}
      DOCKER_IMAGE: {{$pipeline.DockerImage}}

  {{$pipeline.Name}}-deploy-demo:
    group: wip-paul
    label_template: ${service}
    lock_behavior: none
    display_order: -1
    materials:
      service:
        ignore_for_scheduling: false
        pipeline: "{{$pipeline.Name}}-deploy-dev"
        stage: promote
      git:
        git: {{$pipeline.HelmGit.URL}}
        shallow_clone: false
        auto_update: true
        branch: {{$pipeline.HelmGit.Branch}}
        destination: build
    stages:
    - deploy:
        fetch_materials: true
        keep_artifacts: false
        clean_workspace: false
        approval:
          type: success
          allow_only_on_success: false
        jobs:
          helm:
            timeout: 0
            tasks:
            - exec:
                command: /bin/bash
                arguments:
                - -c
                - 'docker run --rm -v $PWD:/build -v /home/go/#{K8S_CFG}:/opt/kubeconfig -e KUBECONFIG="/opt/kubeconfig" --entrypoint /bin/bash dtzar/helm-kubectl:2.14.3 -c "helm upgrade --install --atomic --wait --timeout=120 --namespace=#{NAMESPACE} --values /build/#{CHARTPATH}values.#{ENVIRONMENT}.yaml --set=image.tag=${GO_PIPELINE_LABEL} #{SERVICE_NAME} /build/#{CHARTPATH}"'
                working_directory: build
                run_if: passed
    - bump:
        fetch_materials: true
        keep_artifacts: false
        clean_workspace: false
        approval:
          type: success
          allow_only_on_success: false
        jobs:
          helm:
            timeout: 0
            tasks:
            - exec:
                command: /bin/bash
                arguments:
                - -c
                - 'docker pull #{DOCKER_IMAGE}:${GO_PIPELINE_LABEL} &&
                  docker tag #{DOCKER_IMAGE}:${GO_PIPELINE_LABEL} #{DOCKER_IMAGE}:latest &&
                  docker push #{DOCKER_IMAGE}:latest'
                working_directory: build
                run_if: passed
    - promote:
        fetch_materials: true
        keep_artifacts: false
        clean_workspace: false
        approval:
          type: manual
          allow_only_on_success: true
        jobs:
          helm:
            timeout: 0
            tasks:
            - exec:
                command: /bin/sh
                arguments:
                - -c
                - echo 'manually promoted on $(date)'
                working_directory: build
                run_if: passed
    parameters:
      ENVIRONMENT: {{"demo"}}
      NAMESPACE: {{$pipeline.NamespacePrefix}}-{{"demo"}}
      CHARTPATH: {{$pipeline.HelmChartPath}}
      K8S_CFG: ubirch{{"demo" | Title}}config.conf
      SERVICE_NAME: {{$pipeline.Name}}
      DOCKER_IMAGE: {{$pipeline.DockerImage}}
{{ end }}